Lish Documentation                                        -*- org -*-

[Preliminary place for documentation until I figure out a better format.]

* Introduction
  Lish is a combination of a Unix shell and Common Lisp REPL. As you might
  expect, it allows you to both type Unix commands and evaluate Lisp
  expressions. It tries to do so in way that would not be too annoying to
  someone familiar with either one.

  Lish does many of the things a normal shell does, but, Lish is **NOT** a
  POSIX shell!

** Design philosphy
*** Motivation
    @@@ philosophy.org
*** Command interface vs. programming interface
*** Unix philosophy, Lisp philosophy, and a mixture thereof
* Using Lish
** Installation
*** Install a binary
    You can download an already compiled executable and run it.
**** Pick one from the binary release page. [LINK NEEDED]
**** Put it somewhere in your path.
*** Building an executable from source
    : git clone https://github.com/nibbula/yew.git
    : cd yew/lish
    : sh build.sh

    If all goes well you will have an executable program called =lish=.
    You should put it somewhere in your PATH.
**** Customizing your executable
***** Executables with pre-loaded commands
**** Other implementations than SBCL
     In theory Lish can run on implemtations other than SBCL, but it doesn't
     seem to work well in practice.
***** CCL, ECL, CLisp
      Lish can usually compile and run on these, but the result is too slow.
      These are tested less, so may have bugs.
***** Allegro, LispWorks
      Lish could probably work on these, and maybe even be fast enough, but
      the free versions run out of memory before it can be loaded, so
      I can't really test it. There are probably minor implementation
      portability issues.
***** Mezzano, ABCL, CMUCL, Clasp
      Needs work.
** Loading without the build script
   When you want to compile and load lish from the Common Lisp REPL.
*** Loading
**** Install quicklisp from https://quicklisp.org if you don't already have it.
**** Install lish & dependencies into local-projects
#+BEGIN_SRC shell
   cd ~/quicklisp/local-projects
   git clone --recurse-submodules https://github.com/nibbula/yew.git
#+END_SRC shell
**** In your Lisp, use quicklisp to load Lish:
#+BEGIN_SRC lisp
   (ql:quickload :lish)
#+END_SRC
**** Dependencies
     This changes a lot so this list is probably not accurate.
     If you build a fully loaded Lish, with los and tools, it adds a lot of
     external dependencies.
***** But at least are probably:
      - cffi
      - asdf
      - uiop
      - cl-ppcre
      - eclector, or an SBCL patch
      - cl-base64
      - bordeaux-threads
      - chipz
*** Building an executable
    Once =lish= is loaded you can, say
#+BEGIN_SRC lisp
  (lish:make-standlone)
#+END_SRC

    Alternatively, you should be able to use:
#+BEGIN_SRC lisp
  (asdf:operate 'asdf:program-op :lish)
#+END_SRC
    More specificially, it will likely put an executable in whatever
    =(asdf:apply-output-translations "lish")= returns.
** Quick start
   see [[Syntax Summary]]
   see [[Differences from POSIX shells]]
   see  (from "help editor")
** Start up
*** Invocation
#+BEGIN_SRC lisp
  (lish:lish)
#+END_SRC
    Or just run the executable from the operating system.
*** Initialization file
    Lish attempts to read commands from a file when it starts up.
    The files it tries are, in order:
    1. :init-file keyword to LISH:LISH
    2. *lishrc* variable. This can be set dynamically so nested shells will
       use this.
    3. A operating system specific personal configuration file based on the
       value of (opsys:config-dir "lish"). This is probably the prefered
       location.
    4. The value of lish:*default-lishrc*.
       This is probably something like "$HOME/.lishrc". This is provided so
       that the default place can be customized system or site, as well as
       having a traditional style fallback.
** Typing commands
*** Introduction
    Lish is a combination of a Unix shell and Common Lisp REPL. As you might
    expect, it allows you to both type Unix commands and evaluate Lisp
    expressions. It tries to do so in way that would not be too annoying to
    someone familiar with either one.
*** Basic syntax
**** Summary
     @@@ Should come from "help syntax"
     ; comment
     command [arg...]
     command "string" !*lisp-object* (lisp-code) $ENV_VAR
     command *.glob ?ooba[rz]
     command range{0..10} alternate.{asd,lisp,txt}
     command word\ with\ spaces "string \" with a double quote"
     command | command | ...
     command < file-name
     command > file-name
     ([lisp expressions...])
**** Shell syntax
***** Basic command syntax
      The most basic syntax is:

      : command argument ...

      This runs the command, with any number of arguments. The command can be
      a number of different things:

	- An executable file in your system path

	  For example, on a Unix system files in /usr/bin.
	  This is the normal thing a shell does.

	- A Lish shell command

	  This is something defined by =defcommand=, or a similar commands
          built in to Lish. Note that you can redefine any or all of the built
          in commands, which are essentially the same as user defined commands.

	  A Lish command is just a Lisp function with some extra information
	  about how to parse arguemnts for the shell. You can call any Lish
          command as a Lisp function, and vice versa.

	- a package loadable by ASDF, which contains a command with the same
          name.

	- a Lisp function

	  This is almost exactly like a normal Lisp function call, but the
          arguemnts are read more like a Lish command than pure Lisp syntax.
	  So, for example, environment environment variables such as $HOME
	  are expanded.

          : ▶ prin1 $HOME
          The variable /HOME/SAUCE is unbound.

          : ▶ (prin1 $HOME)
          The variable $HOME is unbound.

	- an alias

	  This translates one command into another. For example if you had
	  defined an alias like:

	  : alias ll "/bin/ls -l"

	  Then when you type:

	  : ll

	  It will run the system command "/bin/ls" with the argument "-l",
          like:

	  : /bin/ls -l

***** Strings
      Strings in Lish are like Lisp strings, delimited with the double quote
      character ("). If you want a double quote in a string, you can preface
      it with a backslash (\).

      Unlike POSIX shells, single quotes don't delimit strings, because they
      are used in standard Lisp code to quote forms. Also backquote (`) is not
      used for process substitution, since backquote is used for
      quasi-quotating in standard Lisp.
***** Quotes
***** Lisp forms
****** Function call
       ()
****** Values
       !
****** Quotes
       ' `
***** Globbing
      Expanding file names from wild card symbols is done by the =glob=
      package. It provides something similar to the traditional Unix wild card
      file "globbing".

      |---------+------------------------------------------------------------|
      | *       | matches any number of characters                           |
      | ?       | matches any single character                               |
      | [c1-c2] | matches a range of characters .eg. [A-Z] or [0-9] or [abc] |
      |         | and the other constructs like:                             |
      |         | [=a=] [:space:] [.lambda.] [!a-z] [^a-z]                   |
      | **      | recursive directory traversal, aka. globstar.              |
      |---------+------------------------------------------------------------|

      For further information, see the documentation[*should be a link]
      for the =glob= package.
***** Ranges and alteration
***** Stream redirection
***** Pipes
***** Whole Lisp lines
**** Connecting commands
***** Input & Output
      Both input and output to and from a command can be redirected to file.
      You can use the traditional redirection syntax:
      : command > file
      or
      : command < file
      or both
      : command < input-file > output-file

      Lish can redirect from the Unix error stream, but when using Lish
      commands, or Lisp functions, it's better to signal errors, since that
      Lisp has at even more standard stream, like:
      =*debug-io*=, =*error-output*=, =*query-io*=, =*standard-input*=,
      =*standard-output*=, =*trace-output*=
      These can all easily be redirected with Lisp code, but the shell does
      not currently provide a short syntax for doing that.
***** Stream pipes
      Like in POSIX shells, the output of one command can be used as the input
      of the next command. Pipelines send the output of one process to the
      input of another.
***** Object pipes
      Lish commands can set a value as the output value.
      Lisp functions return values.
      Either of these can be considered as input for the next command,
      if it is also a.
      Lish commands can specifiy what type of input they accept, which can
      allow a .
***** Conditional execution
      foo && bar
      for || bar
**** Exapansions
***** Lisp expression expansion
***** History expansion
***** Brace expansion, a.k.a. sequence expansion
***** User name expansion, a.k.a. twiddle or tilde expansion
***** Environemnt variable expansion
***** File name expansion, a.k.a globbing
***** Backslash removal
*** Editing
**** Summary
**** Lish specific editor commands
**** Lish specific keymap
**** [[RL documentation]]
*** History
**** see [[history expansion]]
**** see [[RL history]]
*** Completion
**** Lish specific completion
**** Argument completion functions
**** [[see documentation for COMPLETION package.]]
*** Job control
**** Types of jobs
***** System processes
***** Threads
***** Shell commands
**** Examining jobs
***** The jobs list
**** Operating on jobs
***** Foreground & background
***** Pausing
***** Continuing
***** Stopping
** Customization
*** Prompts
    The prompt is set with the =prompt= shell option or the =prompt-function=.
**** Prompt string
***** Prompt string formatting
      @@ docstring from symbolic-prompt-to-string @@
***** Prompt string format directives
      @@ docstring from format-prompt @@
**** Prompt function
*** Themes
     @@ Documentation from :THEME package @@
**** Styles
     @@ Documentation from :STYLE package @@
**** Syntax styles
     @@ Documentation from :SYNTAX package @@
*** Aliases
*** Options
    @@ output of "help options" @@
** Examples
   See `doc/lish-examples.md`.
* Programming
** Introduction
   Unlike most other shells, Lish does not have commands for designed for
   programming or writing shell scripts. Instead, you can use Common Lisp to
   write shell commands and conveniently run them interactively. This allows
   Lish to concentrate on, and prioritize interactive features.

   Instead of inventing another shell scripting language, or using the
   troublesome POSIX shell language, we think that Common Lisp is quite
   suitable for writing shell scripts.  Some advantages of using Common Lisp
   for shell programming are:
    - Powerful, complete, and stable specification.
    - Rich history and set of libraries.
    - Usually fast, typically quickly compiled performant native code.
      rather than being interpreted like traditional shells.

   One issue is that Lisp syntax is quite different from most other
   programming languages. Some people are daunted by the proliferation of
   parentheses. Although I'm quite fond of them, perhaps Lish being able to
   write Lisp without parenthese, and rather as pipelines of functions, may
   help some people feel more comfortable.
** Defining commands
    Shell commands are defined with the =defcommand= macro.
    Arguments to shell command are classes.
    @@@ docstring of defcommand
** Defining argument types
   Argument types should be defined with the =defargtype= macro.
   @@@ docstring of defargtype
** Object pipelines and accepts?
** Completion
**** Shell commands
**** System commands
**** Other things
* Reference
** Syntax
**** Expansions?
***** Lisp expression expansion
***** History expansion
***** Brace expansion, a.k.a. sequence expansion
***** User name expansion, a.k.a. twiddle or tilde expansion
***** Environemnt variable expansion
***** File name expansion, a.k.a globbing
***** Backslash removal
**** detailed syntax BNF?
** Built in commands
*** @@@@
    This should be automatically generated from the builtin commands
    and their docstrings.
** Argument types
*** @@@@
    This should be automatically generated from the arg-* classes
    and their docstrings.
** Options
*** @@@@
    This should be automatically generated from the option docstrings.
* Differences from POSIX shells
** Syntax
   Lish is *NOT* a POSIX shell, or even close! But it should hopefully not
   cause too much annoyance to people accustomed to POSIX shells. Since
   POSIX shell syntax is quite complex, and Lish syntax is fairly simple,
   it's easier to explain what syntax it does have, instead of what syntax is
   missing.

   Lish has two syntax "modes". Shell command syntax and Common Lisp syntax.
   The shell command syntax is fairly simple and is described here.
   Common Lisp syntax is also relatively simple, but does have many subtle
   details. It's not described here, but it's fully described in the Common
   Lisp specification, and many books.

   Common Lisp syntax is usually found inside parentheses, in the shell
   command syntax. For example:

   : ▶ shell-command -z -e (some 'common "lisp" #(code)) | pager -z -b
   :   ^                 ^ ^                           ^ ^           ^
   :   |___shell syntax__| |____Common Lisp syntax_____| |___shell___|

*** Shell syntax
**** Basic command syntax
     The most basic syntax is:

     : command argument ...

     This runs the command, with any number of arguments. The command can be
     a number of different things:

       - An executable file in your system path

	 For example, on a Unix system files in /usr/bin.
	 This is the normal thing a shell does.

       - A Lish shell command

	 This is something defined by =defcommand=, or a similar commands
	 built in to Lish. Note that you can redefine any or all of the built
	 in commands, which are essentially the same as user defined commands.

	 A Lish command is just a Lisp function with some extra information
	 about how to parse arguemnts for the shell. You can call any Lish
	 command as a Lisp function, and vice versa.

       - a Lisp function

	 This is almost exactly like a normal Lisp function call, but the
	 arguemnts are read more like a Lish command than pure Lisp syntax.
	 So, for example, environment environment variables such as $HOME
	 are expanded.

	 : ▶ prin1 $HOME
	 The variable /HOME/SAUCE is unbound.

	 : ▶ (prin1 $HOME)
	 The variable $HOME is unbound.

       - an alias

	 This translates one command into another. For example if you had
	 defined an alias like:

	 : alias ll "/bin/ls -l"

	 Then when you type:

	 : ll

	 It will run the system command "/bin/ls" with the argument "-l",
	 like: 

	 : /bin/ls -l

       - a package loadable by ASDF, which contains a command with the same
	 name. ASDF is the usual package loader for Common Lisp packages,

	 This is like an autoloading mechanism, which can effectively make
	 things available to ASDF like commands in your path. ASDF

**** Strings

     Strings in Lish are Lisp strings, delimited with the double quote
     character ("). If you want a double quote in a string, you can preface
     it with a backslash (\).

     Unlike POSIX shells, single quotes don't delimit strings, because they
     are used in Common Lisp code to quote forms. Also backquote (`) is not
     used for process substitution, since backquote is used for
     quasi-quotating in standard Lisp.

**** Quotes
**** Lisp forms
***** Function call
      ()
***** Values
      , ! #
***** Quotes
      ' `
**** Expansion
***** Globbing
***** Lisp evaluation
***** Lisp expression evaluation
***** Ranges and alteration
**** Stream redirection
**** Pipes
**** Whole Lisp lines
*** Syntax Summary
    ; comment
    command [arg...]
    command "string" !*lisp-object* (lisp-code) $ENV_VAR
    command *.glob ?ooba[rz]
    command range{0..10} alternate.{asd,lisp,txt}
    command word\ with\ spaces "string \" with a double quote"
    command | command | ...
    command < file-name
    command > file-name
    ([lisp expressions...])
** Expansion
*** Environment variables: $
*** History : !
*** Expression : ! ,
** Shell Commands
   Shell commands are defined with the =defcommand= macro.
   Arguments to shell commands are classes.
** Programming
** Completion
*** Shell commands
*** System commands
*** Other things
** Prompting
   The prompt is set with the =prompt= shell option or the =prompt-function=.
** Pipelines
   Pipelines send the output of one process to the input of another.
** Job Control
   Some of the the many differences from other shells.
** Syntax
** Shell Commands
** Programming
** Completion
** Prompting
** Command Pipelines
* COMMENT MeTaDaTa
creation date: [2018-05-10 16:28:30]
creator: "Nibby Nebbulous" <nibbula@gmail.com>
tags: lish manual documentation
